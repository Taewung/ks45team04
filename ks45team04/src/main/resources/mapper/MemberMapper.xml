<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ks45team04.sos.member.mapper.MemberMapper">
	
	<resultMap type="MMember" id="MemberResultMap">
		<id property="memId" 					column="mem_id"/>
		<result property="memPw" 				column="mem_pw"/>
		<result property="memName" 				column="mem_name"/>
		<result property="memEmail" 			column="mem_email"/>
		<result property="memBirth" 			column="mem_birth"/>
		<result property="memPhone" 			column="mem_phone"/>
		<result property="memLevelName" 		column="mem_level_name"/>
		<result property="memRegDatetime" 		column="mem_reg_datetime"/>
		<collection property="loginHistory" ofType="LoginHistory" foreignColumn="mem_id">
			<id property="loginLogoutCode" 					column="login_logout_code"/>
			<result property="loginLogoutId" 				column="login_logout_id"/>
			<result property="loginDatetime" 				column="login_datetime"/>
			<result property="logoutDatetime" 				column="logout_datetime"/>
			<result property="loginLevelName" 				column="login_level_name"/>
		</collection>
	</resultMap>
	
	<delete id="removeMemberById" parameterType="String">
	/*회원 탈퇴*/
	DELETE
	FROM
		member
	WHERE	
		mem_id = #{memId};	
	</delete>
	
	
	
	<update id ="modifyMemberInfo" parameterType="Member">
	/*특정 회원 정보 수정*/
	UPDATE
		member
	SET
		mem_pw = #{memPw},
		mem_name = #{memName},		
		mem_email = #{memEmail},
		mem_phone = #{memPhone}
	WHERE
		mem_id =#{memId};
	</update>
	
	<select id="getMemberInfo" parameterType="String" resultMap="MemberResultMap">
		/*특정 회원정보 조회*/
			SELECT
				m.mem_id,
				m.mem_pw,
				m.mem_name,
				m.mem_email,
				m.mem_birth,
				m.mem_phone,
				m.mem_level_name,
				m.mem_reg_datetime
			FROM
				member AS m
			where
			m.mem_id = #{memId}; 
	</select> 
	<select id="getLoginHistory" parameterType="map" resultMap="MemberResultMap">
	/*로그인 이력 조회*/
	SELECT
		login_logout_code,
		login_logout_id,
		login_datetime,
		logout_datetime
	FROM
		login_logout
		INNER JOIN
		member
		ON
		mem_id = login_logout_id;
	</select>
	
	<select id="getLoginHistoryCnt" resultType="int">
		/*로그인 이력 테이블의 전체 행의 갯수*/
		SELECT
			COUNT(1)
		FROM
			login_logout;
	</select>
	
	<select id="checkId" parameterType="String" resultType="int">	
		/*아이디 중복체크*/
		SELECT
			IF(COUNT(*)=1, 1, 0)
		FROM
			member as m
		WHERE
			m.mem_id = #{memId};
	</select>	
	
	
	
	<insert id="addMember" parameterType="Member">
			/* 회원 가입 */
			INSERT INTO member
			(mem_id, mem_pw, mem_name, mem_email, mem_birth, mem_phone, mem_level_name, mem_reg_datetime)
			VALUES
			(#{memId}, #{memPw}, #{memName}, #{memEmail}, #{memBirth}, #{memPhone}, '회원', now());
	</insert>
	
	
	
	<select id="MemberList" resultMap="MemberResultMap">
			/* 본인 정보 조회 */
			SELECT
				m.mem_id,
				m.mem_pw,
				m.mem_name,
				m.mem_email,
				m.mem_birth,
				m.mem_phone,
				m.mem_level_name,
				m.mem_reg_datetime
			FROM
				member AS m
			where
				m.mem_id = #{memberId};
	</select>
<!-- 	<insert id="MemberList" parameterType="LoginInfo">
		/*로그인 자동증가 코드*/
		INSERT INTO login_logout
				(
				login_logout_code, 
				login_logout_id, 
				login_datetime, 
				logout_datetime, 
				login_level_name
				)
		VALUES 
			(
			sf_login_logout_code(), 
			#{memId},
			 NOW(), 
			 NULL, 
			 #{memLevelName}
			 );
	</insert> -->
	
	<select id="getloginLogoutCode" parameterType="String" resultType="String">
		/* 로그인 PK코드 자동생성 */
	   SELECT
	       CASE
	       WHEN COUNT(1) = 0 THEN CONCAT(#{login_logout_code}, '_1')
	       ELSE
	          CONCAT('log', MAX(CAST(SUBSTRING_INDEX(${loginLogoutCode}, 'log', -1)AS UNSIGNED))+1)
	          END AS newCode
       FROM
          ${login_logout};
	</select>
</mapper>